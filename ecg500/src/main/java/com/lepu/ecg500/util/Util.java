package com.lepu.ecg500.util;import android.annotation.SuppressLint;import android.app.Activity;import android.app.ActivityManager;import android.app.Service;import android.content.ComponentName;import android.content.ContentResolver;import android.content.Context;import android.content.Intent;import android.database.Cursor;import android.graphics.Rect;import android.net.Uri;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Build;import android.provider.MediaStore;import android.telephony.SmsManager;import android.telephony.TelephonyManager;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.view.inputmethod.InputMethodManager;//import com.lib.common.util.log.KLog;import java.io.DataOutputStream;import java.io.File;import java.lang.reflect.Method;import java.net.Inet4Address;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.Socket;import java.net.SocketException;import java.net.URLEncoder;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * Created by Administrator on 2017/8/18. */public class Util {	public static int SCREEN_WIDTH = 0;	public static int SCREEN_HEIGHT = 0;	public static float SCREEN_DENSITY = 0;	/**	 * 将16位的short转换成byte数组	 *	 * @param s short	 * @param little boolean  true 小端模式，false 大段模式	 * @return byte[] 长度为2	 */	public static byte[] shortToByteArray(short s,boolean little) {		byte[] targets = new byte[2];		for (int i = 0; i < 2; i++) {			int offset = (targets.length - 1 - i) * 8;			targets[i] = (byte) ((s >>> offset) & 0xff);		}		if(little){			targets = FormatTransfer.bytesReverseOrder(targets);		}		return targets;	}	/**	 * 字节转换成2进制字符串	 *	 * @param dataByte	 * @return	 */	public static String toBinaryString(byte dataByte) {		String binaryString = Integer.toBinaryString((dataByte & 0xFF) + 0x100).substring(1);		return binaryString;	}	public static boolean parseBoolean(String string) {		boolean result = false;		if (!TextUtils.isEmpty(string)) {			try {				result = Boolean.parseBoolean(string);			} catch (Exception e) {				CustomTool.e(Log.getStackTraceString(e));			}		}		return result;	}	public static byte parseByte(String string) {		byte result = 0;		if (!TextUtils.isEmpty(string)) {			try {				result = Byte.parseByte(string);			} catch (Exception e) {				CustomTool.e(Log.getStackTraceString(e));			}		}		return result;	}	public static short parseShort(String string) {		short result = 0;		if (!TextUtils.isEmpty(string)) {			try {				result = Short.parseShort(string);			} catch (Exception e) {				CustomTool.e(Log.getStackTraceString(e));			}		}		return result;	}	public static int parseInt(String string) {		return parseInt(string,0);	}	public static int parseInt(String string,int defValue) {		int result = defValue;		if (!TextUtils.isEmpty(string)) {			try {				result = Integer.parseInt(string);			} catch (Exception e) {				CustomTool.e(Log.getStackTraceString(e));			}		}		return result;	}	public static long parseLong(String string) {		long result = 0L;		if (!TextUtils.isEmpty(string)) {			try {				result = Long.parseLong(string);			} catch (Exception e) {				CustomTool.e(Log.getStackTraceString(e));			}		}		return result;	}	public static double parseDouble(String string) {		double result = 0.0D;		if (!TextUtils.isEmpty(string)) {			try {				result = Double.parseDouble(string);			} catch (Exception e) {				CustomTool.e(Log.getStackTraceString(e));			}		}		return result;	}	public static float parseFloat(String string) {		float result = 0.0F;		if (!TextUtils.isEmpty(string)) {			try {				result = Float.parseFloat(string);			} catch (Exception e) {				CustomTool.e(Log.getStackTraceString(e));			}		}		return result;	}	// 当get请求时，拼接参数字符串	public static String connectParamsUrl(String url,										  HashMap<String, String> dataParams) {		HashMap<String, String> params = dataParams;		StringBuilder sb = new StringBuilder();		if (params != null && !params.isEmpty()) {			try {				if (url.contains("?")) {					sb.append('&');				} else {					sb.append('?');				}				for (Map.Entry<String, String> entry : params.entrySet()) {					sb.append(entry.getKey()).append('=');					sb.append(URLEncoder.encode(entry.getValue(), "utf-8"));					sb.append('&');				}				sb.deleteCharAt(sb.length() - 1);			} catch (Exception e) {				CustomTool.e(Log.getStackTraceString(e));			}		}		return url + sb.toString();	}	/**	 * 产生11位的boundary	 */	public static String getBoundry() {		StringBuffer sb = new StringBuffer();		for (int t = 1; t < 12; t++) {			long time = System.currentTimeMillis() + t;			if (time % 3 == 0) {				sb.append((char) time % 9);			} else if (time % 3 == 1) {				sb.append((char) (65 + time % 26));			} else {				sb.append((char) (97 + time % 26));			}		}		return sb.toString();	}	@SuppressLint("DefaultLocale")	public static String getLocalWifiIpAddress(Context context) {		String ip = "";		try {			WifiManager wifiManager = (WifiManager) context					.getSystemService(Context.WIFI_SERVICE);			WifiInfo wifiInfo = wifiManager.getConnectionInfo();			if (wifiInfo != null) {				// 获取32位整型IP地址				int ipAddress = wifiInfo.getIpAddress();				// 返回整型地址转换成“*.*.*.*”地址				ip = String.format("%d.%d.%d.%d", (ipAddress & 0xff),						(ipAddress >> 8 & 0xff), (ipAddress >> 16 & 0xff),						(ipAddress >> 24 & 0xff));			}		} catch (Exception e) {		}		return ip;	}	/**	 * eth0	 * usb0	 * @param netName	 * @return	 */	public static String getLocalNetIpAddress(String netName) {		String ip = "";		try {			for (Enumeration<NetworkInterface> en = NetworkInterface					.getNetworkInterfaces(); en.hasMoreElements(); ) {				NetworkInterface intf = en.nextElement();				if(intf != null && intf.getName().equals(netName)){					for (Enumeration<InetAddress> enumIpAddr = intf							.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {						InetAddress inetAddress = enumIpAddr.nextElement();						if (!inetAddress.isLoopbackAddress()								&& inetAddress instanceof Inet4Address) {							// if (!inetAddress.isLoopbackAddress() && inetAddress							// instanceof Inet6Address) {							ip = inetAddress.getHostAddress().toString();							break;						}					}					break;				}			}		} catch (Exception e) {			e.printStackTrace();		}		return ip;	}	public static String getLocalIpAddress() {		try {			for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {				NetworkInterface intf = en.nextElement();				for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {					InetAddress inetAddress = enumIpAddr.nextElement();					if (!inetAddress.isLoopbackAddress() && inetAddress instanceof Inet4Address) {						return inetAddress.getHostAddress();					}				}			}		} catch (Exception ex) {			ex.printStackTrace();		}		return null;	}	/**	 * byte[]数组转换为16进制的字符串	 *	 * @param bytes 要转换的字节数组	 * @return 转换后的结果	 */	public static String bytesToHexString(byte[] bytes) {		StringBuilder sb = new StringBuilder();		for (int i = 0; i < bytes.length; i++) {			String hex = Integer.toHexString(0xFF & bytes[i]);			if (hex.length() == 1) {				sb.append('0');			}			sb.append(hex);			sb.append(" ");		}		return sb.toString();	}	public static String bytesToString(byte[] bytes) {		StringBuilder sb = new StringBuilder();		for (int i = 0; i < bytes.length; i++) {			String value = String.valueOf(bytes[i]);			sb.append(value);			sb.append(" ");		}		return sb.toString();	}	public static void installApk(Context context, String path) {		try {			if (path != null && path.length() != 0) {				File apkfile = new File(path);				if (apkfile.exists()) {					Intent intent = new Intent("android.intent.action.VIEW");					intent.setDataAndType(Uri.parse("file://" + apkfile.toString()), "application/vnd.android.package-archive");					context.startActivity(intent);				}			}		} catch (Exception e) {			e.printStackTrace();		}	}	public static void uninstallApk(Context context, String packageName) {		String uri = "package:" + packageName;		Intent uninstallIntent = new Intent("android.intent.action.DELETE", Uri.parse(uri));		context.startActivity(uninstallIntent);	}	public static String getStringByBooleanArray(boolean[] array) {		StringBuilder sb = new StringBuilder();		try {			for (int i = 0; i < array.length; i++) {				sb.append(array[i]);				sb.append(",");			}			sb.deleteCharAt(sb.length() - 1);		} catch (Exception e) {			e.printStackTrace();		}		return sb.toString();	}	public static boolean[] getBooleanArrayByString(String result) {		boolean[] booleanArray = null;		if (!TextUtils.isEmpty(result)) {			try {				String[] array = result.split(",");				booleanArray = new boolean[array.length];				for (int i = 0; i < booleanArray.length; i++) {					booleanArray[i] = Boolean.parseBoolean(array[i]);				}			} catch (Exception e) {				e.printStackTrace();			}		}		return booleanArray;	}	/**	 * 应用是否进入后台	 *	 * @param context	 * @return	 */	@SuppressWarnings("deprecation")	public static boolean isApplicationBackground(Context context) {		try {			ActivityManager am = (ActivityManager) context					.getSystemService(Context.ACTIVITY_SERVICE);			List<ActivityManager.RunningTaskInfo> tasks = am.getRunningTasks(1);			if (!tasks.isEmpty()) {				ComponentName topActivity = tasks.get(0).topActivity;				if (!topActivity.getPackageName().equals(context.getPackageName())) {					return true;				}			}		} catch (Exception e) {			e.printStackTrace();		}		return false;	}	/**	 * 进入后台	 *	 * @param context	 */	public static void isApplicationEnterBackground(Context context) {		Intent intent = new Intent(Intent.ACTION_MAIN);		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);		intent.addCategory(Intent.CATEGORY_HOME);		context.startActivity(intent);	}	/**	 * 发送短信	 *	 * @param context	 * @param phone	 * @param content	 */	public static void sendMessage(Context context, String phone, String content) {		try {			SmsManager manager = SmsManager.getDefault();			ArrayList<String> list = manager.divideMessage(content);  //因为一条短信有字数限制，因此要将长短信拆分			for (String text : list) {				manager.sendTextMessage(phone, null, text, null, null);			}		} catch (Exception e) {			e.printStackTrace();		}	}	public static void getCurrentAbis() {		String[] abis = null;		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {			abis = Build.SUPPORTED_ABIS;		} else {			abis = new String[]{Build.CPU_ABI, Build.CPU_ABI2};		}		StringBuilder sb = new StringBuilder();		for (String abi : abis) {			sb.append(abi);			sb.append(',');		}		CustomTool.d(String.format("current cpu abis==>%s", sb.toString()));	}	/**	 * 10进制转bcd	 *	 * @param str 10进制数字 String.valueOf(int number);将10进制数字转成字符串传入此参数	 * @return bcd码	 */	public static String decimaltoBcd(String str) {		String b_num = "";		for (int i = 0; i < str.length(); i++) {			String b = Integer.toBinaryString(Integer.parseInt(String.valueOf(str.charAt(i))));			int b_len = 4 - b.length();			for (int j = 0; j < b_len; j++) {				b = "0" + b;			}			b_num += b;		}		return b_num;	}	/**	 * 16进制转bcd	 * 将16进制转成10进制，再将10进制转成bcd	 *	 * @param hex 16进制数字String.valueOf(int number);这里忽略16进制的前缀0x，只转后面的数字为字符串类型，将16进制数字转成字符串传入此参数	 * @return bcd码	 */	public static String HextoBcd(String hex) {		int decimal = Integer.parseInt(hex, 16);		String bcd = decimaltoBcd(String.valueOf(decimal));		return bcd;	}	public static Socket initSocket(Socket socket) {		try {			//socket.setTcpNoDelay(true);//close Nagle算法,需要立即发送数据			socket.setSendBufferSize(8096);			socket.setSoTimeout(5000);			//socket.setKeepAlive(false);//系统心跳关闭。		} catch (Exception e) {			e.printStackTrace();		}		return socket;	}	/**	 * 检查sim卡是否插好了	 *	 * @param context	 * @return	 */	public static boolean checkSimStateValid(Context context) {		boolean flag = true;		TelephonyManager tm = (TelephonyManager) context.getSystemService(Service.TELEPHONY_SERVICE);		int state = tm.getSimState();		switch (state) {			case TelephonyManager.SIM_STATE_ABSENT:				flag = false; // 没有SIM卡				break;			case TelephonyManager.SIM_STATE_UNKNOWN:				flag = false;				break;		}		return flag;	}	/**	 * 应用程序运行命令获取 Root权限，设备必须已破解(获得ROOT权限)	 *	 * @return 应用程序是/否获取Root权限	 */	public static boolean upgradeRootPermission(String pkgCodePath) {		Process process = null;		DataOutputStream os = null;		try {			String cmd = "chmod 777 " + pkgCodePath;			process = Runtime.getRuntime().exec("su"); //切换到root帐号			os = new DataOutputStream(process.getOutputStream());			os.writeBytes(cmd + "\n");			os.writeBytes("exit\n");			os.flush();			process.waitFor();		} catch (Exception e) {			return false;		} finally {			try {				if (os != null) {					os.close();				}				process.destroy();			} catch (Exception e) {			}		}		return true;	}	/**	 * 通过发送广播关机，但是不起作用	 *	 * @param context	 */	public static void closeDeviceByIntent(Context context) {		//        Intent intent = new Intent();		//        //其中false换成true,会弹出是否关机的确认窗口		//        intent.putExtra("android.intent.extra.KEY_CONFIRM", false);		//        intent.setAction(Intent.ACTION_SHUTDOWN);		//        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);		//        context.sendBroadcast(intent);		Intent intent = new Intent("android.intent.action.ACTION_REQUEST_SHUTDOWN");		intent.putExtra("android.intent.extra.KEY_CONFIRM", false);		intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);		context.startActivity(intent);	}	/**	 * 重启设备	 *	 * @param context	 */	public static void rebotDeviceByBraodcast(Context context) {		Intent intent = new Intent();		intent.setAction(Intent.ACTION_REBOOT);		intent.putExtra("nowait", 1);		intent.putExtra("interval", 1);		intent.putExtra("window", 0);		context.sendBroadcast(intent);	}	/**	 * 通过反射关机	 */	public static void closeDeviceByReflect() {		try {			//获得ServiceManager类			Class<?> ServiceManager = Class					.forName("android.os.ServiceManager");			//获得ServiceManager的getService方法			Method getService = ServiceManager.getMethod("getService", String.class);			//调用getService获取RemoteService			Object oRemoteService = getService.invoke(null, Context.POWER_SERVICE);			//获得IPowerManager.Stub类			Class<?> cStub = Class					.forName("android.os.IPowerManager$Stub");			//获得asInterface方法			Method asInterface = cStub.getMethod("asInterface", android.os.IBinder.class);			//调用asInterface方法获取IPowerManager对象			Object oIPowerManager = asInterface.invoke(null, oRemoteService);			//获得shutdown()方法			Method shutdown = oIPowerManager.getClass().getMethod("shutdown", boolean.class, String.class, boolean.class);			//调用shutdown()方法			shutdown.invoke(oIPowerManager, false, "", true);		} catch (Exception e) {			e.printStackTrace();		}	}	/**	 * 恢复出厂设置	 */	public static void doMasterClear(Activity activity) {		Intent intent = new Intent("android.intent.action.MASTER_CLEAR");		intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);		intent.putExtra("android.intent.extra.REASON", "MasterClearConfirm");		intent.putExtra("android.intent.extra.WIPE_EXTERNAL_STORAGE", true);		activity.sendBroadcast(intent);	}	/**	 *      把 Uri 转变 为 真实的 String 路径	 * @param context 上下文	 * @param uri  URI	 * @return 转换结果	 */	public static String uri2Path(Context context, Uri uri) {		if ( null == uri ) {			return null;		}		String data = null;		try{			String scheme = uri.getScheme();			if ( scheme == null ) {				data = uri.getPath();			} else if ( ContentResolver.SCHEME_FILE.equals( scheme ) ) {				data = uri.getPath();			} else if ( ContentResolver.SCHEME_CONTENT.equals( scheme ) ) {				Cursor cursor = context.getContentResolver().query( uri, new String[] { MediaStore.Images.ImageColumns.DATA }, null, null, null );				if ( null != cursor ) {					if ( cursor.moveToFirst() ) {						int index = cursor.getColumnIndex( MediaStore.Images.ImageColumns.DATA );						if ( index > -1 ) {							data = cursor.getString( index );						}					}					cursor.close();				}			}		}catch (Exception e){			CustomTool.d(Log.getStackTraceString(e));		}		return data;	}	/***	 * byte转为String	 *	 * @param bytes	 * @return	 */	public static String bytesToMacString(byte[] bytes) {		if (bytes == null || bytes.length == 0) {			return null;		}		StringBuilder buf = new StringBuilder();		for (byte b : bytes) {			buf.append(String.format("%02X:", b));		}		if (buf.length() > 0) {			buf.deleteCharAt(buf.length() - 1);		}		return buf.toString();	}	public static boolean isIP(String addr){		//首先对长度进行判断		if(TextUtils.isEmpty(addr) || addr.length() < 7 || addr.length() > 15 ){			return false;		}		/**		 * 判断IP格式和范围		 */		String rexp = "([1-9]|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])){3}";		Pattern pat = Pattern.compile(rexp);		Matcher mat = pat.matcher(addr);		boolean ipAddress = mat.find();		if (ipAddress == true){			String[] ips = addr.split("\\.");			if(ips.length == 4){				try{					for(String ip : ips){						if(Integer.parseInt(ip) < 0 || Integer.parseInt(ip) > 255){							return false;						}					}				}catch (Exception e){					return false;				}				return true;			}else{				return false;			}		}		return ipAddress;	}	public static void closeSoftInput(Activity activity) {		View view = activity.getWindow().peekDecorView();		if (view != null && view.getWindowToken() != null) {			InputMethodManager imm = (InputMethodManager) activity					.getSystemService(Context.INPUT_METHOD_SERVICE);			imm.hideSoftInputFromWindow(view.getWindowToken(), 0);			view.clearFocus();		}	}	public static boolean isSoftShowing(Activity activity) {		if (activity==null)			return false;		// 获取当前屏幕内容的高度		int screenHeight = activity.getWindow().getDecorView().getHeight();		// 获取View可见区域的bottom		Rect rect = new Rect();		// DecorView即为activity的顶级view		activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);		// 考虑到虚拟导航栏的情况（虚拟导航栏情况下：screenHeight = rect.bottom + 虚拟导航栏高度）		// 选取screenHeight*2/3进行判断//        KLog.d("screenHeight*2/3="+screenHeight*2/3+"rect.bottom"+rect.bottom);		return screenHeight*2/3 > rect.bottom;	}	public static void openSoftInput(Activity activity) {		//		View view = activity.getWindow().peekDecorView();		//		if (view != null && view.getWindowToken() != null) {		//			InputMethodManager imm = (InputMethodManager) activity		//					.getSystemService(Context.INPUT_METHOD_SERVICE);		//			imm.showSoftInput(activity.getCurrentFocus(),		//					InputMethodManager.SHOW_FORCED);		//		}		InputMethodManager imm = (InputMethodManager) activity				.getSystemService(Context.INPUT_METHOD_SERVICE);		imm.showSoftInput(activity.getCurrentFocus(), InputMethodManager.RESULT_SHOWN);		imm.toggleSoftInput(InputMethodManager.SHOW_FORCED,				InputMethodManager.HIDE_IMPLICIT_ONLY);	}	public static String getLocalSimIp() {		try {			Enumeration<NetworkInterface> enumeration = NetworkInterface.getNetworkInterfaces();			if (enumeration != null) {				for (; enumeration.hasMoreElements(); ) {					NetworkInterface intf = enumeration.nextElement();					for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {						InetAddress inetAddress = enumIpAddr.nextElement();						if (!inetAddress.isLoopbackAddress() && inetAddress instanceof Inet4Address) {							return inetAddress.getHostAddress();						}					}				}			}		}catch (SocketException e){			e.printStackTrace();		}		return "";	}}